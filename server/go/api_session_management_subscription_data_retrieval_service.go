/*
 * Nudm_SDM
 *
 * Nudm Subscriber Data Management Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 2.2.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"errors"
	"net/http"
)

// SessionManagementSubscriptionDataRetrievalAPIService is a service that implements the logic for the SessionManagementSubscriptionDataRetrievalAPIServicer
// This service should implement the business logic for every endpoint for the SessionManagementSubscriptionDataRetrievalAPI API.
// Include any external packages or services that will be required by this service.
type SessionManagementSubscriptionDataRetrievalAPIService struct {
}

// NewSessionManagementSubscriptionDataRetrievalAPIService creates a default api service
func NewSessionManagementSubscriptionDataRetrievalAPIService() SessionManagementSubscriptionDataRetrievalAPIServicer {
	return &SessionManagementSubscriptionDataRetrievalAPIService{}
}

// GetSmData - retrieve a UE&#39;s Session Management Subscription Data
func (s *SessionManagementSubscriptionDataRetrievalAPIService) GetSmData(ctx context.Context, supi string, supportedFeatures string, singleNssai Snssai, dnn string, plmnId PlmnId, ifNoneMatch string, ifModifiedSince string) (ImplResponse, error) {
	// Simulating a database lookup or external service call to retrieve subscription data based on the provided supi
	subscriptionData, err := getSubscriberData(supi)
	if err != nil {
		// If there's an error during the retrieval, return a 500 Internal Server Error response
		return Response(http.StatusInternalServerError, nil), err
	}

	// Check if the subscription data exists
	if subscriptionData == nil {
		// If no valid subscription data is found, return a 404 Not Found response
		problemDetails := ProblemDetails{Detail: "No valid subscription data found for the UE"}
		return Response(http.StatusNotFound, problemDetails), nil
	}

	// Check if the requested session management subscription is available
	if !isRequestedSessionAvailable(subscriptionData, singleNssai, dnn, supportedFeatures, plmnId) {
		// If the requested session management subscription is not available, return a 404 Not Found response
		problemDetails := ProblemDetails{Detail: "Requested session management subscription is not available"}
		return Response(http.StatusNotFound, problemDetails), nil
	}

	// If all checks pass, return the subscription data with a 200 OK response
	return Response(http.StatusOK, subscriptionData), nil
	// TODO - update GetSmData with the required logic for this service method.
	// Add api_session_management_subscription_data_retrieval_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, SmSubsData{}) or use other options such as http.Ok ...
	// return Response(200, SmSubsData{}), nil

	// TODO: Uncomment the next line to return response Response(400, ProblemDetails{}) or use other options such as http.Ok ...
	// return Response(400, ProblemDetails{}), nil

	// TODO: Uncomment the next line to return response Response(404, ProblemDetails{}) or use other options such as http.Ok ...
	// return Response(404, ProblemDetails{}), nil

	// TODO: Uncomment the next line to return response Response(500, ProblemDetails{}) or use other options such as http.Ok ...
	// return Response(500, ProblemDetails{}), nil

	// TODO: Uncomment the next line to return response Response(503, ProblemDetails{}) or use other options such as http.Ok ...
	// return Response(503, ProblemDetails{}), nil

	// TODO: Uncomment the next line to return response Response(0, {}) or use other options such as http.Ok ...
	// return Response(0, nil),nil

	// return Response(http.StatusNotImplemented, nil), errors.New("GetSmData method not implemented")
}

// Function to simulate a database lookup or external service call to retrieve subscription data
func getSubscriberData(supi string) (*SessionManagementSubscriptionData, error) {
	// returning nil to simulate no data found for the provided supi
	subscriptions := database()
	subscription, ok := subscriptions[supi]
	if ok {
		return &subscription, nil
	} else {
		return nil, errors.New("data does not exist for the corresponding SUPI")
	}
}

// Function to check if the requested session management subscription is available
func isRequestedSessionAvailable(subscriptionData *SessionManagementSubscriptionData, singleNssai Snssai, dnn string, supportedFeatures string, plmnId PlmnId) bool {
	// always returning true to simulate availability
	return true
}
